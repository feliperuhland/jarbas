from celery import shared_task

from jarbas.chamber_of_deputies.models import Reimbursement
from jarbas.core.management.commands import LoadCommand


@shared_task
def create_or_update_reimbursement(data):
    """
    :param data: (dict) reimbursement data (keys and data types must mach
    Reimbursement model)
    """
    serialized = serialize_reimbursement(data)
    kwargs = dict(document_id=serialized['document_id'], defaults=serialized)
    Reimbursement.objects.update_or_create(**kwargs)


def serialize_reimbursement(data):
    """Read the dict generated by DictReader and fix types"""

    missing = ('probability', 'suspicions')
    for key in missing:
        data[key] = None

    rename = (
        ('subquota_number', 'subquota_id'),
        ('reimbursement_value_total', 'total_reimbursement_value')
    )
    for old, new in rename:
        data[new] = data.pop(old)

    integers = (
        'applicant_id',
        'batch_number',
        'congressperson_document',
        'congressperson_id',
        'document_id',
        'document_type',
        'installment',
        'month',
        'subquota_group_id',
        'subquota_id',
        'term',
        'term_id',
        'year'
    )
    for key in integers:
        data[key] = LoadCommand.to_number(data[key], int)

    floats = (
        'document_value',
        'remark_value',
        'total_net_value',
        'total_reimbursement_value'
    )
    for key in floats:
        data[key] = LoadCommand.to_number(data[key])

    issue_date = LoadCommand.to_date(data['issue_date'])
    data['issue_date'] = issue_date.strftime('%Y-%m-%d')

    return data
